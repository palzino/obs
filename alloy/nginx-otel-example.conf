# Nginx Configuration with OpenTelemetry Tracing
# This example shows how to configure Nginx to:
# 1. Generate OpenTelemetry spans
# 2. Propagate trace context to upstream services
# 3. Log trace IDs in access logs

load_module modules/ngx_http_opentelemetry_module.so;

events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # ========================================
    # OpenTelemetry Configuration
    # ========================================
    
    opentelemetry_config /etc/nginx/otel-nginx.toml;
    
    # Enable OpenTelemetry
    opentelemetry on;
    
    # Operation name for spans
    opentelemetry_operation_name "$request_method $uri";
    
    # Trust incoming trace context from upstream
    opentelemetry_trust_incoming_spans on;
    
    # Propagate trace context to upstream services
    opentelemetry_propagate;
    
    # Capture trace IDs as variables
    opentelemetry_capture_headers on;
    
    # ========================================
    # Logging Configuration
    # ========================================
    
    # JSON format with trace context
    log_format json_combined escape=json '{'
        '"timestamp":"$time_iso8601",'
        '"remote_addr":"$remote_addr",'
        '"remote_user":"$remote_user",'
        '"request":"$request",'
        '"method":"$request_method",'
        '"path":"$request_uri",'
        '"protocol":"$server_protocol",'
        '"status":$status,'
        '"body_bytes_sent":$body_bytes_sent,'
        '"request_time":$request_time,'
        '"upstream_response_time":"$upstream_response_time",'
        '"upstream_addr":"$upstream_addr",'
        '"http_referer":"$http_referer",'
        '"http_user_agent":"$http_user_agent",'
        '"http_x_forwarded_for":"$http_x_forwarded_for",'
        '"trace_id":"$opentelemetry_trace_id",'
        '"span_id":"$opentelemetry_span_id",'
        '"traceparent":"$opentelemetry_context_traceparent"'
    '}';
    
    # Standard format (for debugging)
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" trace_id=$opentelemetry_trace_id';
    
    # Write logs
    access_log /var/log/nginx/access-json.log json_combined;
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;
    
    # ========================================
    # Performance Settings
    # ========================================
    
    sendfile on;
    tcp_nopush on;
    keepalive_timeout 65;
    gzip on;
    
    # ========================================
    # Upstream Services
    # ========================================
    
    upstream backend_app {
        server backend:8080;
        keepalive 32;
    }
    
    upstream api_service {
        server api:3000;
        keepalive 32;
    }
    
    # ========================================
    # Server Blocks
    # ========================================
    
    server {
        listen 80;
        listen [::]:80;
        server_name example.com www.example.com;
        
        # Enable tracing for this server block
        opentelemetry on;
        
        # Root location
        location / {
            proxy_pass http://backend_app;
            
            # Propagate trace context
            proxy_set_header traceparent $opentelemetry_context_traceparent;
            proxy_set_header tracestate $opentelemetry_context_tracestate;
            
            # Standard proxy headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }
        
        # API endpoints
        location /api/ {
            proxy_pass http://api_service;
            
            # Propagate trace context
            proxy_set_header traceparent $opentelemetry_context_traceparent;
            proxy_set_header tracestate $opentelemetry_context_tracestate;
            
            # Headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Add custom attributes to span
            opentelemetry_attribute "http.target" "$request_uri";
            opentelemetry_attribute "http.route" "/api/*";
        }
        
        # Health check endpoint (no tracing)
        location /health {
            opentelemetry off;
            access_log off;
            return 200 "OK\n";
            add_header Content-Type text/plain;
        }
        
        # Static files (optional tracing)
        location /static/ {
            alias /usr/share/nginx/html/static/;
            expires 1y;
            add_header Cache-Control "public, immutable";
            
            # Disable tracing for static files to reduce noise
            opentelemetry off;
        }
    }
    
    # ========================================
    # HTTPS Server (if using SSL)
    # ========================================
    
    # server {
    #     listen 443 ssl http2;
    #     listen [::]:443 ssl http2;
    #     server_name example.com www.example.com;
    #     
    #     ssl_certificate /etc/nginx/ssl/cert.pem;
    #     ssl_certificate_key /etc/nginx/ssl/key.pem;
    #     
    #     # Enable tracing
    #     opentelemetry on;
    #     
    #     location / {
    #         proxy_pass http://backend_app;
    #         
    #         # Propagate trace context
    #         proxy_set_header traceparent $opentelemetry_context_traceparent;
    #         proxy_set_header tracestate $opentelemetry_context_tracestate;
    #         
    #         proxy_set_header Host $host;
    #         proxy_set_header X-Real-IP $remote_addr;
    #         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #         proxy_set_header X-Forwarded-Proto https;
    #     }
    # }
}

